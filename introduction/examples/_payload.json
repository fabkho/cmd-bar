[{"data":1,"prerenderedAt":84},["Reactive",2],{"search-api":3},[4,11,22,30,36,42,65,75],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     cmd-bar.   powerful and flexible web component written in Vue.js.      +50 Components  ready to build rich pages   Docs  and   Page  layouts  Start from a   README , scale to a framework documentation  Navigation and Table of Contents generation  Fully configurable design system  Leverages    Typography  and    Elements  Used on   Content Documentation      What's included      Nuxt Architecture   Harness the full power of   Nuxt 3  and its   modules  ecosystem.    Nuxt Studio ready   Edit your theme content and appearance with live-preview within   Nuxt Studio .    Vue Components   Use built-in components (or your own!) inside your content.    Write Markdown   Enjoy the ease and simplicity of Markdown and discover   MDC syntax .    Deploy anywhere   Zero config on   Vercel  or   Netlify . Choose between static generation, on-demand rendering (Node) or edge-side rendering on   CloudFlare workers .    Extensible.   Customize the whole design, or add components using slots - you can make Docus your own.",{"id":12,"path":13,"dir":14,"title":15,"description":16,"keywords":17,"body":21},"content:1.introduction:1.getting-started.md","/introduction/getting-started","introduction","Getting Started","Todo",[18,19,20],"Play online","Setup Vue","Setup Nuxt","  Getting Started  Todo  Play online  You can start playing with Docus in your browser using Stackblitz:  Play on StackBlitz  Setup Vue   Add   cmd-bar  dependency to your project:      npm   install   cmd-bar     yarn   add   cmd-bar    pnpm add cmd-bar\n   Then you can import the   CmdBar  Compound Component in your project.     import   { CmdBar }   from   'cmd-bar'    \u003C  CmdBar   :groups=\"groupedCommands\"   />     \u003C  CmdBar.Dialog  >       \u003C  template   #header>         \u003CCmdBar.Input   placeholder  =  \"search fo anything />       \u003C/template>       \u003Ctemplate #content>         \u003CCmdBar.List :config=\"  listConfig\">             \u003Ctemplate   #default=\"{   command   }\">               \u003Cdiv   class  =  \"leading\"  >                 \u003C  img   :src=\"command.leading\"   alt  =  \"icon\"   />                 {{ command.label }}               \u003C/  div  >               \u003C  span   v-if  =  \"command.shortcut\"   class  =  \"actions\"  >                 \u003C  kbd   v-for  =  \"shortcut of command.shortcut)\"   :key=\"shortcut\">                   {{ shortcut }}                 \u003C/kbd>               \u003C/span>             \u003C/template>         \u003C/CmdBar.List>       \u003C/template>     \u003C/CmdBar.Dialog>   \u003C/CmdBar>  Setup Nuxt   Add   cmd-bar  dependency to your project:      npm   install   cmd-bar     yarn   add   cmd-bar    pnpm add cmd-bar\n   Add   cmd-bar  to you modules inside   nuxt.config.ts     export   default   defineNuxtConfig  ({     modules: [  'cmd-bar'  ],   })  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":23,"path":24,"dir":14,"title":25,"description":26,"keywords":27,"body":29},"content:1.introduction:2.data-structure.md","/introduction/data-structure","Data Structure","Commands are represented as an array of Command objects. A Command object must at least have an id and a label property. Here is an example:",[28],"Define your groups","  Data Structure  Commands are represented as an array of   Command  objects. A   Command  object must at least have an   id  and a   label  property. Here is an example:     \u003C  script   setup   lang  =  \"ts\"  >   const   commands  :   Command  []   =   [     {       id:   '1'  ,       label:   'Command 1'  ,     },     {       id:   '2'  ,       label:   'Command 2'  ,     },     {       id:   '3'  ,       label:   'Command 3'  ,     },   ]          const   selectedCommand   =   ref  \u003C  Command   |   null  >(  null  )   \u003C/  script  >    \u003C  template  >     \u003C  CmdBar   :groups  =  \"[{key: 'people', commands: 'people'}]\"  >       \u003C  template   #  header  >         \u003C  CmdBar.Input   placeholder  =  \"search fo anything\"   />       \u003C/  template  >       \u003C  template   #  content  >         \u003C  CmdBar.List   :config  =  \"listConfig\"   @selected  =  \"selectedCommand = $event\"  >             {{ command.label }}         \u003C/  CmdBar.List  >       \u003C/  template  >     \u003C/  CmdBar  >   \u003C/  template  >  Define your groups  Commands are always grouped. You can define your groups by providing an array of   Group  objects to the   groups  prop. A   Group  object must at least have a   key  and a   commands  property. Here is an example:     \u003C  script   setup   lang  =  \"ts\"  >   const   groups  :   Group  []   =   [     {       key:   'people'  ,       commands: [         {           id:   '1'  ,           label:   'Command 1'  ,         },         {           id:   '2'  ,           label:   'Command 2'  ,         },         {           id:   '3'  ,           label:   'Command 3'  ,         },       ],     },     {       key:   'places'  ,       commands: [         {           id:   '4'  ,           label:   'Command 4'  ,         },         {           id:   '5'  ,           label:   'Command 5'  ,         },         {           id:   '6'  ,           label:   'Command 6'  ,         },       ],     }   ]   \u003C/  script  >    \u003C  template  >   \u003C  CmdBar   :groups  =  \"groups\"  >       \u003C  template   #  header  >         \u003C  CmdBar.Input   placeholder  =  \"search fo anything\"   />       \u003C/  template  >       \u003C  template   #  content  >         \u003C  CmdBar.List   :config  =  \"listConfig\"  >           \u003C  template   #  default  =  \"  { command }  \"  >               {{ command.label }}           \u003C/  template  >         \u003C/  CmdBar.List  >       \u003C/  template  >     \u003C/  CmdBar  >   \u003C/  template  >  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":31,"path":32,"dir":14,"title":33,"description":7,"keywords":34,"body":35},"content:1.introduction:5.examples.md","/introduction/examples","Examples",[],"  Examples",{"id":37,"path":38,"dir":14,"title":39,"description":7,"keywords":40,"body":41},"content:1.introduction:6.roadmap.md","/introduction/roadmap","Roadmap",[],"  Roadmap",{"id":43,"path":44,"dir":45,"title":46,"description":47,"keywords":48,"body":64},"content:2.components:1.components.md","/components/components","components","Components","Discover every component you can use in your content.",[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).   ::    ::alert{type=\"success\"}   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).   ::    ::alert{type=\"warning\"}   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).   ::    ::alert{type=\"danger\"}   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).   ::     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]    :badge[  Deprecated  ]{type=\"warning\"}    ::badge{type=\"danger\"}   Not found!   ::     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero   ---   cta:     -   Get started     -   /get-started   secondary:     -   Open on GitHub â†’     -   https://github.com/nuxtlabs/docus   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter   ---   #title   Document-driven framework    #description   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.   ::     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout   #summary   This is a callout! Click me to open.    #content   This is the content of the callout.   ::       ::callout{type=\"warning\"}   #summary   This is a callout! Click me to open.    #content   This is the content of the callout.   ::     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}    #title    Nuxt Architecture.    #description    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br    Use Nuxt to build a static site, or a serverless app.    ::     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid   #title   What's included    #root   :ellipsis    #default     ::card     #title     Nuxt Architecture.     #description     Harness the full power of Nuxt and the Nuxt ecosystem.     ::     ::card     #title     Vue Components.     #description     Use built-in components (or your own!) inside your content.     ::     ::card     #title     Write Markdown.     #description     Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::   ::     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus     npm   install   docus     ::code-group     ```bash [Yarn]     yarn   add   docus     ```     ```bash [NPM]     npm   install   docus     ```   ::     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */    ::code-block{label=\"Preview\" preview}     ::badge     Hello World!     ::   ::     \u003CCopyButton />        :copy-button{content=\"hey!\"}     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}   :icon{name=\"logos:vue\"}   :icon{name=\"logos:nuxt-icon\"}     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}   -   **Important**   -   Always   ::    ::list{type=\"success\"}   -   Amazing   -   Congrats   ::    ::list{type=\"info\"}   -   Do you know?   -   You can also do this   ::    ::list{type=\"warning\"}   -   Be careful   -   Use with precautions   ::    ::list{type=\"danger\"}   -   Drinking too much   -   Driving drunk   ::    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}     \u003CTerminal />        :terminal{content=\"nuxi build\"}     \u003CVideoPlayer />         ::div     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}   ::   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":66,"path":67,"dir":45,"title":68,"description":69,"keywords":70,"body":74},"content:2.components:2.composables.md","/components/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[71,72,73],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >   const   {   config   }   =   useDocus  ()   \u003C/  script  >    \u003C  template  >     \u003C  div  >       \u003C  h1  >{{ config.title }}\u003C/  h1  >       \u003C  p  >{{ config.description }}\u003C/  p  >     \u003C/  div  >   \u003C/  template  >    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >   const   {   tree   }   =   useDocus  ()   \u003C/  script  >    \u003C  template  >     \u003C  DocsAsideTree   :links  =  \"tree\"   />   \u003C/  template  >    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {     // Is menu visible     visible  ,     // Close menu function     close  ,     // Open menu function     open  ,     // Toggle menu function     toggle   }   =   useMenu  ()    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {     // Headings on the page     visibleHeadings  ,     // Active headings (for the current page)     activeHeadings  ,     // Update headings (an array of DOM nodes)     updateHeadings   }   =   useScrollspy  ()   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"id":76,"path":77,"dir":45,"title":78,"description":79,"keywords":80,"body":83},"content:2.components:3.layouts.md","/components/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[81,82],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---   aside  :   true   bottom  :   true   toc  :   false   ---    Your awesome content  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---   title  :   Home   layout  :   page   fluid  :   true   ---  Check   Home page  as live sample of page layout  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",1697556736235]